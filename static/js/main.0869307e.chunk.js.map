{"version":3,"sources":["components/projectileMotion/inputField.js","components/projectileMotion/inputMap.js","components/projectileMotion/projectileMotion.js","components/spaceDodger/spaceDodger.js","App.js","reportWebVitals.js","index.js"],"names":["InputField","props","className","htmlFor","id","label","type","placeholder","defaultValue","onChange","e","handleChange","target","inputMap","inputDragMap","ProjectileMotion","useEffect","buildGrid","projectileList","projectileCount","applyDrag","pathMap","Map","projectileRadius","gridSizeY","gridSizeX","ballColor","mass","airDensity","dragCoeff","angle","fireVelocity","renderInterval","xCoor","yCoor","canvas","document","getElementById","canvasContext","getContext","save","scale","font","clearRect","beginPath","strokeStyle","strokeRect","fillStyle","fillRect","closePath","generateYAxis","generateXAxis","drawPath","textAlign","fillText","forEach","proj","generateCanvasPrjojectile","xMovement","yMovement","radius","xSpeed","ySpeed","timeToImpact","velocityAngle","velocity","restore","setLineDash","value","point","i","moveTo","x","y","lineTo","stroke","color","time","arc","Math","PI","fill","translate","toFixed","rotate","startInterval","setInterval","start","round","abs","secToGame","winnerOverlay","createElement","innerHTML","querySelector","appendChild","interval","setTimeout","clearInterval","remove","setRenderGame","renderWinnerOverlay","bottom","sqrt","xNegAccel","yNegAccel","xDragForce","yDragForce","asin","has","get","push","filter","projectiles","length","handleInputChange","replace","newVal","fluid","isNaN","parseFloat","tabIndex","map","obj","index","style","display","height","width","onClick","cos","sin","set","firstId","delete","shift","SpaceDodger","xMovement2","yMovement2","isMultiPlayer","score","starList","smallBoxDim","objectList","stop","newObInterval","projSpeed","difficulty","keySet","Set","arrowSvg","viewBox","xmlns","d","floor","random","drawStars","generateCanvasRect","star","focus","newObstacles","scoreTracker","window","localStorage","getItem","setItem","scoreKeep","hiScore","innerText","obstacleMovement","p1Detection","p2Detection","collisionDetection","overlay","clientHeight","clientWidth","gameOver","restart","onclick","handleRestart","handleKeyDown","key","preventDefault","add","k","toLowerCase","updateCanvas","handleKeyUp","handleArrowPress","direction","event","onresize","onKeyDown","onKeyUp","onMouseDown","onMouseUp","App","useState","renderGame","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0869307e.chunk.js","sourcesContent":["import React from 'react';\nimport './inputField.scss';\n\nconst InputField = (props) => {\n    return (\n        <div className='input-field-container'>\n            <label className='grid-label' htmlFor={props.id}>\n                {props.label}\n            </label>\n            <input\n                id={props.id}\n                type='text'\n                placeholder={props.placeholder}\n                defaultValue={props.defaultValue}\n                onChange={(e) => props.handleChange(e.target)}\n            ></input>\n        </div>\n    );\n};\n\nexport default InputField;\n","export const inputMap = [\n    {\n        id: 'fire-velocity',\n        defaultValue: 60,\n        label: 'Fire Speed (m/s)',\n        placeholder: 'Enter Speed',\n    },\n    {\n        id: 'angle',\n        defaultValue: 45,\n        label: 'Firing Angle (degrees)',\n        placeholder: 'Enter Angle',\n    },\n    {\n        id: 'x-coor',\n        defaultValue: 0,\n        label: 'X Coordinate',\n        placeholder: 'Enter x-coordinate',\n    },\n    {\n        id: 'y-coor',\n        defaultValue: 0,\n        label: 'Y Coordinate',\n        placeholder: 'Enter y-coordinate',\n    },\n];\n\nexport const inputDragMap = [\n    {\n        id: 'mass',\n        defaultValue: 1000,\n        label: 'Mass (kg)',\n        placeholder: 'Enter Mass',\n    },\n    {\n        id: 'radius',\n        defaultValue: 5,\n        label: 'Projectile Radius (m)',\n        placeholder: 'Enter Radius',\n    },\n    {\n        id: 'fluid',\n        defaultValue: 1.225,\n        label: 'Fluid Density (kg/m^3)',\n        placeholder: 'Enter Fluid Density',\n    },\n    {\n        id: 'dragCoeff',\n        defaultValue: 0.5,\n        label: 'Drag Coefficient',\n        placeholder: 'Enter Drag Coefficient',\n    },\n];\n","import React, { useEffect } from 'react';\nimport InputField from './inputField';\nimport { inputDragMap, inputMap } from './inputMap';\nimport './projectileMotion.scss';\n\nconst ProjectileMotion = (props) => {\n    useEffect(() => {\n        buildGrid();\n    }, []);\n\n    let projectileList = [];\n    let projectileCount = 0;\n    let applyDrag = false;\n    let pathMap = new Map();\n    let projectileRadius = 5;\n    const gridSizeY = 700;\n    const gridSizeX = 1200;\n    const ballColor = 'blue';\n    const dpr = 3;\n    let mass = 1000;\n    let airDensity = 1.225;\n    let dragCoeff = 0.5;\n    let angle = 45;\n    let fireVelocity = 60;\n    let renderInterval = null;\n    let xCoor = 0;\n    let yCoor = 0;\n\n    const buildGrid = () => {\n        let canvas = document.getElementById('my-canvas-projectile');\n        if (canvas) {\n            let canvasContext = canvas.getContext('2d');\n            canvasContext.save();\n            canvasContext.scale(dpr, dpr);\n            canvasContext.font = '0.9rem Arial';\n            canvasContext.clearRect(0, 0, gridSizeX, gridSizeY);\n            canvasContext.beginPath();\n            canvasContext.strokeStyle = 'black';\n            canvasContext.strokeRect(0, 0, gridSizeX, gridSizeY);\n            canvasContext.fillStyle = 'white';\n            canvasContext.fillRect(1, 1, gridSizeX - 2, gridSizeY - 2);\n            canvasContext.closePath();\n            generateYAxis();\n            generateXAxis();\n            drawPath();\n            canvasContext.beginPath();\n            canvasContext.textAlign = 'center';\n            canvasContext.fillStyle = 'black';\n            canvasContext.fillText(\n                'Click to fire projectile',\n                gridSizeX / 2,\n                gridSizeY / 2,\n            );\n            canvasContext.textAlign = 'start';\n            canvasContext.closePath();\n            projectileList.forEach((proj) => {\n                generateCanvasPrjojectile(\n                    proj.xMovement,\n                    proj.yMovement,\n                    proj.radius,\n                    ballColor,\n                    proj.xSpeed,\n                    proj.ySpeed,\n                    proj.timeToImpact,\n                    proj.velocityAngle,\n                    proj.velocity,\n                );\n            });\n            canvasContext.restore();\n        }\n    };\n\n    const drawPath = () => {\n        let canvas = document.getElementById('my-canvas-projectile');\n        let canvasContext = canvas.getContext('2d');\n        canvasContext.beginPath();\n        canvasContext.setLineDash([3, 3]);\n        canvasContext.strokeStyle = 'red';\n        pathMap.forEach((value) => {\n            value.forEach((point, i) => {\n                if (i === 0) {\n                    canvasContext.moveTo(point.x, point.y);\n                } else {\n                    canvasContext.lineTo(point.x, point.y);\n                }\n            });\n        });\n        canvasContext.stroke();\n        canvasContext.setLineDash([]);\n        canvasContext.closePath();\n    };\n\n    const generateCanvasPrjojectile = (\n        x,\n        y,\n        radius,\n        color,\n        xSpeed,\n        ySpeed,\n        time,\n        velocityAngle,\n        velocity,\n    ) => {\n        let canvas = document.getElementById('my-canvas-projectile');\n        let canvasContext = canvas.getContext('2d');\n        canvasContext.beginPath();\n        canvasContext.strokeStyle = color;\n        canvasContext.fillStyle = color;\n        canvasContext.arc(x, y, radius, 0, 2 * Math.PI);\n        canvasContext.fill();\n        canvasContext.fillStyle = '#000000';\n        canvasContext.stroke();\n        canvasContext.closePath();\n        canvasContext.beginPath();\n        canvasContext.translate(x, y);\n        canvasContext.fillText(`y-speed: ${ySpeed.toFixed(3)} m/s`, -10, -70);\n        canvasContext.fillText(`x-speed: ${xSpeed.toFixed(3)} m/s`, -10, -55);\n        canvasContext.fillText(`x: ${x.toFixed(3)} m`, -10, -40);\n        canvasContext.fillText(\n            `y: ${(gridSizeY - y - radius).toFixed(3)} m`,\n            -10,\n            -25,\n        );\n        canvasContext.fillText(`t: ${time.toFixed(3)} s`, -10, -10);\n        canvasContext.translate(-x, -y);\n        canvasContext.translate(x, y);\n        canvasContext.rotate(velocityAngle + 90 * (Math.PI / 180));\n        canvasContext.strokeStyle = 'green';\n        canvasContext.moveTo(0, -radius);\n        canvasContext.lineTo(0, -radius - velocity * 0.8);\n        canvasContext.moveTo(0, radius);\n        canvasContext.lineTo(0, radius + velocity * 0.5);\n        canvasContext.moveTo(0, radius);\n        canvasContext.translate(0, -radius - velocity * 0.8);\n        canvasContext.moveTo(0, 0);\n        canvasContext.lineTo(3, 5);\n        canvasContext.moveTo(0, 0);\n        canvasContext.lineTo(-3, 5);\n        canvasContext.translate(0, radius + velocity * 0.8);\n        canvasContext.translate(0, radius + velocity * 0.5);\n        canvasContext.moveTo(0, 0);\n        canvasContext.lineTo(3, -5);\n        canvasContext.moveTo(0, 0);\n        canvasContext.lineTo(-3, -5);\n        canvasContext.translate(0, -radius - velocity * 0.5);\n        canvasContext.rotate(-(velocityAngle + 90 * (Math.PI / 180)));\n        canvasContext.translate(-x, -y);\n        canvasContext.translate(x, y);\n        canvasContext.moveTo(0, radius);\n        canvasContext.lineTo(0, radius + 25);\n        canvasContext.translate(0, radius + 25);\n        canvasContext.moveTo(0, 0);\n        canvasContext.lineTo(3, -5);\n        canvasContext.moveTo(0, 0);\n        canvasContext.lineTo(-3, -5);\n        canvasContext.translate(0, -radius - 25);\n        canvasContext.translate(-x, -y);\n        canvasContext.stroke();\n        canvasContext.fillStyle = color;\n        canvasContext.closePath();\n    };\n\n    const generateYAxis = () => {\n        let intervalCount = gridSizeY / 100;\n        let canvas = document.getElementById('my-canvas-projectile');\n        let canvasContext = canvas.getContext('2d');\n        for (let i = 0; i <= intervalCount; i++) {\n            canvasContext.beginPath();\n            canvasContext.fillStyle = 'black';\n            canvasContext.fillText(`${i * 100}m`, 0, gridSizeY - i * 100);\n            canvasContext.fillStyle = ballColor;\n            canvasContext.closePath();\n        }\n    };\n\n    const generateXAxis = () => {\n        let intervalCount = gridSizeX / 100;\n        let canvas = document.getElementById('my-canvas-projectile');\n        let canvasContext = canvas.getContext('2d');\n        for (let i = 1; i <= intervalCount; i++) {\n            canvasContext.beginPath();\n            canvasContext.fillStyle = 'black';\n            canvasContext.fillText(`${i * 100}m`, i * 100, gridSizeY);\n            canvasContext.fillStyle = ballColor;\n            canvasContext.closePath();\n        }\n    };\n\n    const renderWinnerOverlay = () => {\n        let secToGame = 5;\n        const winnerOverlay = document.createElement('div');\n        winnerOverlay.innerHTML =\n            '<h1>Winner! Starting mini game in 5 seconds</h1>';\n        winnerOverlay.className = 'winner-overlay';\n        document.querySelector('#root').appendChild(winnerOverlay);\n        const interval = setInterval(() => {\n            secToGame--;\n            winnerOverlay.innerHTML = `<h1>Winner! Starting mini game in ${secToGame} seconds</h1>`;\n        }, 1000);\n        setTimeout(() => {\n            clearInterval(interval);\n            winnerOverlay && winnerOverlay.remove();\n            props.setRenderGame(true);\n        }, 5000);\n    };\n\n    const startInterval = () => {\n        renderInterval = setInterval(() => {\n            if (document.getElementById('my-canvas-projectile')) {\n                projectileList.forEach((proj) => {\n                    if (\n                        proj.yMovement > gridSizeY - proj.radius &&\n                        proj.start === false\n                    ) {\n                        proj.yMovement = gridSizeY - proj.radius;\n                        if (\n                            Math.round(proj.xMovement) === 777 &&\n                            angle !== 0 &&\n                            Math.abs(angle) !== 90 &&\n                            fireVelocity > 10\n                        ) {\n                            renderWinnerOverlay();\n                        }\n                        proj.bottom = true;\n                    } else {\n                        if (proj.yMovement < gridSizeY - proj.radius) {\n                            proj.start = false;\n                        }\n                        if (proj.bottom === false) {\n                            proj.ySpeed = proj.ySpeed + 9.8 / 100;\n                            let velocity = Math.sqrt(\n                                proj.ySpeed ** 2 + proj.xSpeed ** 2,\n                            );\n                            let xNegAccel = null;\n                            let yNegAccel = null;\n                            if (applyDrag) {\n                                let xDragForce =\n                                    dragCoeff *\n                                    0.5 *\n                                    airDensity *\n                                    proj.xSpeed ** 2 *\n                                    Math.PI *\n                                    proj.radius ** 2;\n                                let yDragForce =\n                                    dragCoeff *\n                                    0.5 *\n                                    airDensity *\n                                    proj.ySpeed ** 2 *\n                                    Math.PI *\n                                    proj.radius ** 2;\n                                xNegAccel = xDragForce / mass / 100;\n                                yNegAccel = yDragForce / mass / 100;\n                            }\n                            proj.velocityAngle = Math.asin(\n                                proj.ySpeed / velocity,\n                            );\n                            if (applyDrag) {\n                                proj.xSpeed -= xNegAccel;\n                                if (proj.ySpeed < 0) {\n                                    proj.ySpeed += yNegAccel;\n                                } else {\n                                    proj.ySpeed -= yNegAccel;\n                                }\n                            }\n                            proj.velocity = velocity;\n                            proj.xMovement = proj.xMovement + proj.xSpeed / 100;\n                            proj.yMovement = proj.yMovement + proj.ySpeed / 100;\n                            proj.timeToImpact = proj.timeToImpact + 0.01;\n                            if (pathMap.has(proj.id)) {\n                                pathMap.get(proj.id).push({\n                                    x: proj.xMovement,\n                                    y: proj.yMovement,\n                                });\n                            }\n                        }\n                    }\n                    buildGrid();\n                });\n            } else {\n                clearInterval(renderInterval);\n            }\n            let tempList = projectileList.filter(\n                (projectiles) => projectiles.bottom === false,\n            );\n            if (tempList.length === 0) {\n                clearInterval(renderInterval);\n            }\n        }, 10);\n    };\n\n    const handleCanvasClick = () => {\n        clearInterval(renderInterval);\n        projectileList.push({\n            id: projectileCount,\n            velocityAngle: 0,\n            start: true,\n            timeToImpact: 0,\n            xMovement: xCoor,\n            yMovement: gridSizeY - yCoor - projectileRadius,\n            bottom: false,\n            xSpeed: Math.cos(angle * (Math.PI / 180)) * fireVelocity,\n            ySpeed: -Math.sin(angle * (Math.PI / 180)) * fireVelocity,\n            velocity: 0,\n            radius: projectileRadius,\n        });\n        pathMap.set(projectileCount, []);\n        projectileCount++;\n        if (projectileList.length === 4) {\n            let firstId = projectileList[0].id;\n            pathMap.delete(firstId);\n            projectileList.shift();\n        }\n        startInterval();\n    };\n\n    const handleInputChange = (target) => {\n        target.value = target.value.replace(/[^0-9\\.]/g, '');\n        const valueMap = {\n            'y-coor': (newVal) => (yCoor = newVal),\n            'x-coor': (newVal) => (xCoor = newVal),\n            angle: (newVal) => (angle = newVal),\n            'fire-velocity': (newVal) => (fireVelocity = newVal),\n            mass: (newVal) => (mass = newVal),\n            radius: (newVal) => (projectileRadius = newVal),\n            fluid: (newVal) => (airDensity = newVal),\n            dragCoeff: (newVal) => (dragCoeff = newVal),\n        };\n        const id = target.id;\n        valueMap[id](\n            target.value && !isNaN(target.value)\n                ? parseFloat(target.value)\n                : null,\n        );\n    };\n\n    const toggleDragInput = () => {\n        applyDrag = !applyDrag;\n        if (applyDrag) {\n            document.getElementById('drag-inputs').style.display = 'flex';\n        } else {\n            document.getElementById('drag-inputs').style.display = 'none';\n        }\n    };\n\n    return (\n        <div className='draw-container' id='draw-container' tabIndex='0'>\n            <section className='input-parent'>\n                <div className='input-container'>\n                    {inputMap.map((obj, index) => {\n                        return (\n                            <InputField\n                                key={index}\n                                id={obj.id}\n                                placeholder={obj.placeholder}\n                                defaultValue={obj.defaultValue}\n                                label={obj.label}\n                                handleChange={handleInputChange}\n                            />\n                        );\n                    })}\n                    <div className='input-field-container' id='drag-container'>\n                        <label className='grid-label' htmlFor='drag'>\n                            Apply Drag\n                        </label>\n                        <input\n                            id='drag'\n                            type='checkbox'\n                            onChange={toggleDragInput}\n                        ></input>\n                    </div>\n                </div>\n                <div\n                    className='input-container drag'\n                    id='drag-inputs'\n                    style={{ display: 'none' }}\n                >\n                    {inputDragMap.map((obj, index) => {\n                        return (\n                            <InputField\n                                key={index}\n                                id={obj.id}\n                                placeholder={obj.placeholder}\n                                defaultValue={obj.defaultValue}\n                                label={obj.label}\n                                handleChange={handleInputChange}\n                            />\n                        );\n                    })}\n                </div>\n            </section>\n            <div className='move-container' id='projectile-move-container'>\n                <canvas\n                    className='canvas'\n                    id='my-canvas-projectile'\n                    height={gridSizeY * dpr}\n                    width={gridSizeX * dpr}\n                    onClick={handleCanvasClick}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default ProjectileMotion;\n","import React, { useEffect } from 'react';\nimport './spaceDodger.scss';\n\nconst SpaceDodger = () => {\n    let xMovement = 20;\n    let yMovement = 200;\n    let xMovement2 = 20;\n    let yMovement2 = 220;\n    let isMultiPlayer = null;\n    let score = 0;\n    let starList = [];\n    const smallBoxDim = 10;\n    const gridSizeY = 400;\n    const gridSizeX = 800;\n    const dpr = 2;\n    let objectList = [{ x: gridSizeX }, { x: gridSizeX }];\n    const movementSpeed = 4;\n    let stop = false;\n    let newObInterval = 2000;\n    let projSpeed = 10;\n    let difficulty = null;\n    let keySet = new Set();\n\n    useEffect(() => {\n        buildGrid();\n    }, []);\n\n    const arrowSvg = (\n        <svg\n            width='16'\n            height='16'\n            viewBox='0 0 16 16'\n            fill='none'\n            xmlns='http://www.w3.org/2000/svg'\n        >\n            <path\n                d='M7.75 1.86994L13.13 7.24994L9.46836e-08 7.24994L7.67962e-08 8.74994L13.13 8.74994L7.75 14.1299L8.81 15.1899L16 7.99994L8.81 0.809939L7.75 1.86994Z'\n                fill='#000000'\n                stroke='#000000'\n            />\n        </svg>\n    );\n\n    if (starList.length === 0) {\n        for (let i = 0; i < 30; i++) {\n            let x = Math.floor(Math.random() * gridSizeX);\n            let y = Math.floor(Math.random() * gridSizeY);\n            starList.push({ x: x, y: y });\n        }\n    }\n\n    const buildGrid = () => {\n        let canvas = document.getElementById('my-canvas-obj');\n        let canvasContext = canvas.getContext('2d');\n        canvasContext.save();\n        canvasContext.scale(dpr, dpr);\n        canvasContext.clearRect(0, 0, gridSizeX, gridSizeY);\n        canvasContext.beginPath();\n        canvasContext.strokeRect(0, 0, gridSizeX, gridSizeY);\n        canvasContext.closePath();\n        drawStars();\n        generateCanvasRect(\n            xMovement,\n            yMovement,\n            smallBoxDim,\n            smallBoxDim,\n            'green',\n        );\n        if (isMultiPlayer) {\n            generateCanvasRect(\n                xMovement2,\n                yMovement2,\n                smallBoxDim,\n                smallBoxDim,\n                'yellow',\n            );\n        }\n        objectList.forEach((obj) => {\n            if (!obj.y) {\n                obj.y = Math.floor(Math.random() * gridSizeY);\n            }\n            generateCanvasRect(obj.x, obj.y, 10, 2, 'red');\n        });\n        canvasContext.restore();\n    };\n\n    const generateCanvasRect = (x, y, width, height, color) => {\n        let canvas = document.getElementById('my-canvas-obj');\n        let canvasContext = canvas.getContext('2d');\n        canvasContext.beginPath();\n        canvasContext.fillStyle = color;\n        canvasContext.fillRect(x, y, width, height);\n        canvasContext.stroke();\n        canvasContext.closePath();\n    };\n\n    const drawStars = () => {\n        let canvas = document.getElementById('my-canvas-obj');\n        let canvasContext = canvas.getContext('2d');\n\n        canvasContext.strokeStyle = 'white';\n\n        starList.forEach((star) => {\n            canvasContext.beginPath();\n            canvasContext.arc(star.x, star.y, 1, 0, 2 * Math.PI);\n            canvasContext.stroke();\n            canvasContext.closePath();\n        });\n    };\n\n    const start = () => {\n        if (document.getElementById('start-overlay')) {\n            document.getElementById('start-overlay').remove();\n        }\n        document.getElementById('draw-container').focus();\n        let newObstacles = setInterval(() => {\n            objectList.push({ x: gridSizeX });\n            if (objectList[0] && objectList[0].x <= -20) {\n                objectList.shift();\n            }\n            buildGrid();\n        }, newObInterval);\n\n        let scoreTracker = setInterval(() => {\n            score++;\n            if (\n                window.localStorage.getItem('hi-score') &&\n                score > window.localStorage.getItem('hi-score')\n            ) {\n                window.localStorage.setItem('hi-score', score);\n            } else if (!window.localStorage.getItem('hi-score')) {\n                window.localStorage.setItem('hi-score', score);\n            }\n            let isDraw = document.getElementById('draw-container');\n            if (isDraw) {\n                let scoreKeep = document.getElementById('score-keeper');\n                let hiScore = document.getElementById('hi-score');\n                scoreKeep.innerText = `Score: ${score}`;\n                hiScore.innerText = `Highscore: ${window.localStorage.getItem(\n                    'hi-score',\n                )}`;\n            }\n        }, 200);\n\n        const collisionDetection = (obj) => {\n            let p1Detection =\n                xMovement + smallBoxDim === obj.x &&\n                yMovement <= obj.y &&\n                yMovement + smallBoxDim >= obj.y;\n            let p2Detection =\n                xMovement2 + smallBoxDim === obj.x &&\n                yMovement2 <= obj.y &&\n                yMovement2 + smallBoxDim >= obj.y;\n            if (p1Detection || (isMultiPlayer && p2Detection)) {\n                stop = true;\n            }\n        };\n\n        let obstacleMovement = setInterval(() => {\n            objectList.forEach((obj) => {\n                obj.x--;\n                collisionDetection(obj);\n            });\n            if (stop || !document.getElementById('my-canvas-obj')) {\n                clearInterval(obstacleMovement);\n                clearInterval(newObstacles);\n                clearInterval(scoreTracker);\n                clearInterval(difficulty);\n                if (document.getElementById('move-container')) {\n                    let overlay = document.createElement('div');\n                    overlay.id = 'canvas-overlay';\n                    overlay.style.height =\n                        document.querySelector('canvas').clientHeight + 'px';\n                    overlay.style.width =\n                        document.querySelector('canvas').clientWidth + 'px';\n                    let gameOver = document.createElement('h3');\n                    gameOver.innerText = 'GAME OVER!';\n                    overlay.appendChild(gameOver);\n                    let restart = document.createElement('button');\n                    restart.innerText = 'RESTART';\n                    restart.onclick = handleRestart;\n                    overlay.appendChild(restart);\n                    document\n                        .getElementById('move-container')\n                        .appendChild(overlay);\n                }\n            } else {\n                buildGrid();\n            }\n        }, projSpeed);\n\n        difficulty = setInterval(() => {\n            clearInterval(obstacleMovement);\n            clearInterval(newObstacles);\n            clearInterval(scoreTracker);\n            clearInterval(difficulty);\n            newObInterval = newObInterval * 0.5;\n            projSpeed = projSpeed * 0.9;\n            if (!stop) {\n                start();\n            }\n        }, 10000);\n    };\n\n    const handleRestart = () => {\n        document.getElementById('canvas-overlay').remove();\n        xMovement = 20;\n        yMovement = 200;\n        xMovement2 = 20;\n        yMovement2 = 220;\n        newObInterval = 2000;\n        projSpeed = 10;\n        score = 0;\n        objectList = [{ x: gridSizeX }, { x: gridSizeX }];\n        stop = false;\n        start();\n    };\n\n    const addToKeySet = (key) => {\n        keySet.add(key);\n    };\n\n    const removeFromKeySet = (key) => {\n        keySet.delete(key);\n    };\n\n    const updateCanvas = (key) => {\n        switch (key.toLowerCase()) {\n            case 'arrowup':\n                if (yMovement !== 0) {\n                    yMovement = yMovement - movementSpeed;\n                }\n                break;\n            case 'arrowdown':\n                if (yMovement <= gridSizeY - smallBoxDim) {\n                    yMovement = yMovement + movementSpeed;\n                }\n                break;\n            case 'arrowleft':\n                if (xMovement !== 0) {\n                    xMovement = xMovement - movementSpeed;\n                }\n                break;\n            case 'arrowright':\n                if (xMovement <= gridSizeX - smallBoxDim) {\n                    xMovement = xMovement + movementSpeed;\n                }\n                break;\n            case 'w':\n                if (isMultiPlayer && yMovement2 !== 0) {\n                    yMovement2 = yMovement2 - movementSpeed;\n                }\n                break;\n            case 's':\n                if (isMultiPlayer && yMovement2 <= gridSizeY - smallBoxDim) {\n                    yMovement2 = yMovement2 + movementSpeed;\n                }\n                break;\n            case 'a':\n                if (isMultiPlayer && xMovement2 !== 0) {\n                    xMovement2 = xMovement2 - movementSpeed;\n                }\n                break;\n            case 'd':\n                if (isMultiPlayer && xMovement2 <= gridSizeX - smallBoxDim) {\n                    xMovement2 = xMovement2 + movementSpeed;\n                }\n                break;\n            default:\n                break;\n        }\n    };\n\n    const handleKeyDown = (e) => {\n        e.preventDefault();\n        addToKeySet(e.key);\n        keySet.forEach((k) => {\n            updateCanvas(k);\n        });\n    };\n\n    const handleKeyUp = (e) => {\n        e.preventDefault();\n        removeFromKeySet(e.key);\n    };\n\n    const handleArrowPress = (direction, remove) => {\n        let event = { key: direction, preventDefault: () => {} };\n        if (remove) {\n            handleKeyUp(event);\n        } else {\n            handleKeyDown(event);\n        }\n    };\n\n    window.onresize = () => {\n        if (document.getElementById('canvas-overlay')) {\n            let overlay = document.getElementById('canvas-overlay');\n            overlay.style.height =\n                document.querySelector('canvas').clientHeight + 'px';\n            overlay.style.width =\n                document.querySelector('canvas').clientWidth + 'px';\n        }\n    };\n\n    return (\n        <div\n            className='draw-container'\n            id='draw-container'\n            tabIndex='0'\n            onKeyDown={(e) => handleKeyDown(e)}\n            onKeyUp={(e) => handleKeyUp(e)}\n        >\n            <div id='score-keeper'>Score: 0</div>\n            <div id='hi-score'>\n                Highscore:{' '}\n                {window.localStorage.getItem('hi-score')\n                    ? window.localStorage.getItem('hi-score')\n                    : 0}\n            </div>\n            <div className='button-container'>\n                <button\n                    onClick={() => {\n                        isMultiPlayer = false;\n                    }}\n                >\n                    1 Player\n                </button>\n                <button\n                    onClick={() => {\n                        isMultiPlayer = true;\n                    }}\n                >\n                    2 Player\n                </button>\n            </div>\n            <div className='move-container' id='move-container'>\n                <div\n                    id='start-overlay'\n                    style={{\n                        height: gridSizeY + 'px',\n                        width: gridSizeX + 'px',\n                    }}\n                >\n                    <section className='instruction-section'>\n                        <h3>Instructions</h3>\n                        <div>Player 1: Arrow Keys</div>\n                        <div>Player 2: WASD</div>\n                    </section>\n                    <button onClick={start}>Start</button>\n                </div>\n                <canvas\n                    className='canvas'\n                    id='my-canvas-obj'\n                    height={gridSizeY * dpr}\n                    width={gridSizeX * dpr}\n                />\n            </div>\n            <section className='mobile-arrow-section'>\n                <section className='up'>\n                    <button\n                        className='up-btn'\n                        onMouseDown={() => handleArrowPress('arrowUp')}\n                        onMouseUp={() => handleArrowPress('arrowUp', true)}\n                    >\n                        {arrowSvg}\n                    </button>\n                </section>\n                <section className='bottom-keys'>\n                    <button\n                        className='left'\n                        onMouseDown={() => handleArrowPress('arrowLeft')}\n                        onMouseUp={() => handleArrowPress('arrowLeft', true)}\n                    >\n                        {arrowSvg}\n                    </button>\n                    <button\n                        className='down'\n                        onMouseDown={() => handleArrowPress('arrowDown')}\n                        onMouseUp={() => handleArrowPress('arrowDown', true)}\n                    >\n                        {arrowSvg}\n                    </button>\n                    <button\n                        className='right'\n                        onMouseDown={() => handleArrowPress('arrowRight')}\n                        onMouseUp={() => handleArrowPress('arrowRight', true)}\n                    >\n                        {arrowSvg}\n                    </button>\n                </section>\n            </section>\n        </div>\n    );\n};\n\nexport default SpaceDodger;\n","import { useState } from 'react';\nimport { render } from 'sass';\nimport ProjectileMotion from './components/projectileMotion/projectileMotion';\nimport SpaceDodger from './components/spaceDodger/spaceDodger';\n\nfunction App() {\n    const [renderGame, setRenderGame] = useState(false);\n\n    return (\n        <div className='App'>\n            {!renderGame ? (\n                <ProjectileMotion setRenderGame={setRenderGame} />\n            ) : (\n                <SpaceDodger />\n            )}\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}