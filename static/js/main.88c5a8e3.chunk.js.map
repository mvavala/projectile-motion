{"version":3,"sources":["components/projectileMotion/inputField.js","components/projectileMotion/inputMap.js","components/projectileMotion/projectileMotion.js","App.js","reportWebVitals.js","index.js"],"names":["InputField","props","className","htmlFor","id","label","type","placeholder","defaultValue","onChange","e","handleChange","target","inputMap","inputDragMap","ProjectileMotion","useEffect","buildGrid","projectileList","projectileCount","applyDrag","pathMap","Map","projectileRadius","gridSizeY","gridSizeX","ballColor","mass","airDensity","dragCoeff","angle","fireVelocity","renderInterval","xCoor","yCoor","canvasContext","document","getElementById","getContext","save","scale","font","clearRect","beginPath","strokeStyle","strokeRect","fillStyle","fillRect","closePath","generateYAxis","generateXAxis","drawPath","forEach","proj","generateCanvasPrjojectile","xMovement","yMovement","radius","xSpeed","ySpeed","timeToImpact","velocityAngle","velocity","restore","setLineDash","value","point","i","moveTo","x","y","lineTo","stroke","color","time","arc","Math","PI","fill","translate","fillText","toFixed","rotate","handleInputChange","replace","newVal","fluid","isNaN","parseFloat","tabIndex","map","obj","index","style","display","height","width","onClick","clearInterval","push","start","bottom","cos","sin","set","length","firstId","delete","shift","setInterval","sqrt","xNegAccel","yNegAccel","xDragForce","yDragForce","asin","has","get","filter","projectiles","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.88c5a8e3.chunk.js","sourcesContent":["import React from 'react';\nimport './inputField.scss';\n\nconst InputField = (props) => {\n    return (\n        <div className='input-field-container'>\n            <label className='grid-label' htmlFor={props.id}>\n                {props.label}\n            </label>\n            <input\n                id={props.id}\n                type='text'\n                placeholder={props.placeholder}\n                defaultValue={props.defaultValue}\n                onChange={(e) => props.handleChange(e.target)}\n            ></input>\n        </div>\n    );\n};\n\nexport default InputField;\n","export const inputMap = [\n    {\n        id: 'fire-velocity',\n        defaultValue: 60,\n        label: 'Fire Speed (m/s)',\n        placeholder: 'Enter Speed',\n    },\n    {\n        id: 'angle',\n        defaultValue: 45,\n        label: 'Firing Angle (degrees)',\n        placeholder: 'Enter Angle',\n    },\n    {\n        id: 'x-coor',\n        defaultValue: 0,\n        label: 'X Coordinate',\n        placeholder: 'Enter x-coordinate',\n    },\n    {\n        id: 'y-coor',\n        defaultValue: 0,\n        label: 'Y Coordinate',\n        placeholder: 'Enter y-coordinate',\n    },\n];\n\nexport const inputDragMap = [\n    {\n        id: 'mass',\n        defaultValue: 1000,\n        label: 'Mass (kg)',\n        placeholder: 'Enter Mass',\n    },\n    {\n        id: 'radius',\n        defaultValue: 5,\n        label: 'Projectile Radius (m)',\n        placeholder: 'Enter Radius',\n    },\n    {\n        id: 'fluid',\n        defaultValue: 1.225,\n        label: 'Fluid Density (kg/m^3)',\n        placeholder: 'Enter Fluid Density',\n    },\n    {\n        id: 'dragCoeff',\n        defaultValue: 0.5,\n        label: 'Drag Coefficient',\n        placeholder: 'Enter Drag Coefficient',\n    },\n];\n","import React, { useEffect } from 'react';\nimport InputField from './inputField';\nimport { inputDragMap, inputMap } from './inputMap';\nimport './projectileMotion.scss';\n\nconst ProjectileMotion = () => {\n    useEffect(() => {\n        buildGrid();\n    }, []);\n\n    let projectileList = [];\n    let projectileCount = 0;\n    let applyDrag = false;\n    let pathMap = new Map();\n    let projectileRadius = 5;\n    const gridSizeY = 700;\n    const gridSizeX = 1200;\n    const ballColor = 'blue';\n    const dpr = 3;\n    let mass = 1000;\n    let airDensity = 1.225;\n    let dragCoeff = 0.5;\n    let angle = 45;\n    let fireVelocity = 60;\n    let renderInterval = null;\n    let xCoor = 0;\n    let yCoor = 0;\n\n    const buildGrid = () => {\n        let canvas = document.getElementById('my-canvas-projectile');\n        let canvasContext = canvas.getContext('2d');\n        canvasContext.save();\n        canvasContext.scale(dpr, dpr);\n        canvasContext.font = '0.9rem Arial';\n        canvasContext.clearRect(0, 0, gridSizeX, gridSizeY);\n        canvasContext.beginPath();\n        canvasContext.strokeStyle = 'black';\n        canvasContext.strokeRect(0, 0, gridSizeX, gridSizeY);\n        canvasContext.fillStyle = 'white';\n        canvasContext.fillRect(1, 1, gridSizeX - 2, gridSizeY - 2);\n        canvasContext.closePath();\n        generateYAxis();\n        generateXAxis();\n        drawPath();\n        projectileList.forEach((proj) => {\n            generateCanvasPrjojectile(\n                proj.xMovement,\n                proj.yMovement,\n                proj.radius,\n                ballColor,\n                proj.xSpeed,\n                proj.ySpeed,\n                proj.timeToImpact,\n                proj.velocityAngle,\n                proj.velocity,\n            );\n        });\n        canvasContext.restore();\n    };\n\n    const drawPath = () => {\n        let canvas = document.getElementById('my-canvas-projectile');\n        let canvasContext = canvas.getContext('2d');\n        canvasContext.beginPath();\n        canvasContext.setLineDash([3, 3]);\n        canvasContext.strokeStyle = 'red';\n        pathMap.forEach((value) => {\n            value.forEach((point, i) => {\n                if (i === 0) {\n                    canvasContext.moveTo(point.x, point.y);\n                } else {\n                    canvasContext.lineTo(point.x, point.y);\n                }\n            });\n        });\n        canvasContext.stroke();\n        canvasContext.setLineDash([]);\n        canvasContext.closePath();\n    };\n\n    const generateCanvasPrjojectile = (\n        x,\n        y,\n        radius,\n        color,\n        xSpeed,\n        ySpeed,\n        time,\n        velocityAngle,\n        velocity,\n    ) => {\n        let canvas = document.getElementById('my-canvas-projectile');\n        let canvasContext = canvas.getContext('2d');\n        canvasContext.beginPath();\n        canvasContext.strokeStyle = color;\n        canvasContext.arc(x, y, radius, 0, 2 * Math.PI);\n        canvasContext.fill();\n        canvasContext.fillStyle = '#000000';\n        canvasContext.stroke();\n        canvasContext.closePath();\n        canvasContext.beginPath();\n        canvasContext.translate(x, y);\n        canvasContext.fillText(`y-speed: ${ySpeed.toFixed(3)} m/s`, -10, -70);\n        canvasContext.fillText(`x-speed: ${xSpeed.toFixed(3)} m/s`, -10, -55);\n        canvasContext.fillText(`x: ${x.toFixed(3)} m`, -10, -40);\n        canvasContext.fillText(\n            `y: ${(gridSizeY - y - radius).toFixed(3)} m`,\n            -10,\n            -25,\n        );\n        canvasContext.fillText(`t: ${time.toFixed(3)} s`, -10, -10);\n        canvasContext.translate(-x, -y);\n        canvasContext.translate(x, y);\n        canvasContext.rotate(velocityAngle + 90 * (Math.PI / 180));\n        canvasContext.strokeStyle = 'green';\n        canvasContext.moveTo(0, -radius);\n        canvasContext.lineTo(0, -radius - velocity * 0.8);\n        canvasContext.moveTo(0, radius);\n        canvasContext.lineTo(0, radius + velocity * 0.5);\n        canvasContext.moveTo(0, radius);\n        canvasContext.translate(0, -radius - velocity * 0.8);\n        canvasContext.moveTo(0, 0);\n        canvasContext.lineTo(3, 5);\n        canvasContext.moveTo(0, 0);\n        canvasContext.lineTo(-3, 5);\n        canvasContext.translate(0, radius + velocity * 0.8);\n        canvasContext.translate(0, radius + velocity * 0.5);\n        canvasContext.moveTo(0, 0);\n        canvasContext.lineTo(3, -5);\n        canvasContext.moveTo(0, 0);\n        canvasContext.lineTo(-3, -5);\n        canvasContext.translate(0, -radius - velocity * 0.5);\n        canvasContext.rotate(-(velocityAngle + 90 * (Math.PI / 180)));\n        canvasContext.translate(-x, -y);\n        canvasContext.translate(x, y);\n        canvasContext.moveTo(0, radius);\n        canvasContext.lineTo(0, radius + 25);\n        canvasContext.translate(0, radius + 25);\n        canvasContext.moveTo(0, 0);\n        canvasContext.lineTo(3, -5);\n        canvasContext.moveTo(0, 0);\n        canvasContext.lineTo(-3, -5);\n        canvasContext.translate(0, -radius - 25);\n        canvasContext.translate(-x, -y);\n        canvasContext.stroke();\n        canvasContext.fillStyle = color;\n        canvasContext.closePath();\n    };\n\n    const generateYAxis = () => {\n        let intervalCount = gridSizeY / 100;\n        let canvas = document.getElementById('my-canvas-projectile');\n        let canvasContext = canvas.getContext('2d');\n        for (let i = 0; i <= intervalCount; i++) {\n            canvasContext.beginPath();\n            canvasContext.fillStyle = 'black';\n            canvasContext.fillText(`${i * 100}m`, 0, gridSizeY - i * 100);\n            canvasContext.fillStyle = ballColor;\n            canvasContext.closePath();\n        }\n    };\n\n    const generateXAxis = () => {\n        let intervalCount = gridSizeX / 100;\n        let canvas = document.getElementById('my-canvas-projectile');\n        let canvasContext = canvas.getContext('2d');\n        for (let i = 1; i <= intervalCount; i++) {\n            canvasContext.beginPath();\n            canvasContext.fillStyle = 'black';\n            canvasContext.fillText(`${i * 100}m`, i * 100, gridSizeY);\n            canvasContext.fillStyle = ballColor;\n            canvasContext.closePath();\n        }\n    };\n\n    const startInterval = () => {\n        renderInterval = setInterval(() => {\n            if (document.getElementById('my-canvas-projectile')) {\n                projectileList.forEach((proj) => {\n                    if (\n                        proj.yMovement > gridSizeY - proj.radius &&\n                        proj.start === false\n                    ) {\n                        proj.yMovement = gridSizeY - proj.radius;\n                        proj.bottom = true;\n                    } else {\n                        if (proj.yMovement < gridSizeY - proj.radius) {\n                            proj.start = false;\n                        }\n                        if (proj.bottom === false) {\n                            proj.ySpeed = proj.ySpeed + 9.8 / 100;\n                            let velocity = Math.sqrt(\n                                proj.ySpeed ** 2 + proj.xSpeed ** 2,\n                            );\n                            let xNegAccel = null;\n                            let yNegAccel = null;\n                            if (applyDrag) {\n                                let xDragForce =\n                                    dragCoeff *\n                                    0.5 *\n                                    airDensity *\n                                    proj.xSpeed ** 2 *\n                                    Math.PI *\n                                    proj.radius ** 2;\n                                let yDragForce =\n                                    dragCoeff *\n                                    0.5 *\n                                    airDensity *\n                                    proj.ySpeed ** 2 *\n                                    Math.PI *\n                                    proj.radius ** 2;\n                                xNegAccel = xDragForce / mass / 100;\n                                yNegAccel = yDragForce / mass / 100;\n                            }\n                            proj.velocityAngle = Math.asin(\n                                proj.ySpeed / velocity,\n                            );\n                            if (applyDrag) {\n                                proj.xSpeed -= xNegAccel;\n                                if (proj.ySpeed < 0) {\n                                    proj.ySpeed += yNegAccel;\n                                } else {\n                                    proj.ySpeed -= yNegAccel;\n                                }\n                            }\n                            proj.velocity = velocity;\n                            proj.xMovement = proj.xMovement + proj.xSpeed / 100;\n                            proj.yMovement = proj.yMovement + proj.ySpeed / 100;\n                            proj.timeToImpact = proj.timeToImpact + 0.01;\n                            if (pathMap.has(proj.id)) {\n                                pathMap.get(proj.id).push({\n                                    x: proj.xMovement,\n                                    y: proj.yMovement,\n                                });\n                            }\n                        }\n                    }\n                    buildGrid();\n                });\n            } else {\n                clearInterval(renderInterval);\n            }\n            let tempList = projectileList.filter(\n                (projectiles) => projectiles.bottom === false,\n            );\n            if (tempList.length === 0) {\n                clearInterval(renderInterval);\n            }\n        }, 10);\n    };\n\n    const handleCanvasClick = () => {\n        clearInterval(renderInterval);\n        projectileList.push({\n            id: projectileCount,\n            velocityAngle: 0,\n            start: true,\n            timeToImpact: 0,\n            xMovement: xCoor,\n            yMovement: gridSizeY - yCoor - projectileRadius,\n            bottom: false,\n            xSpeed: Math.cos(angle * (Math.PI / 180)) * fireVelocity,\n            ySpeed: -Math.sin(angle * (Math.PI / 180)) * fireVelocity,\n            velocity: 0,\n            radius: projectileRadius,\n        });\n        pathMap.set(projectileCount, []);\n        projectileCount++;\n        if (projectileList.length === 4) {\n            let firstId = projectileList[0].id;\n            pathMap.delete(firstId);\n            projectileList.shift();\n        }\n        startInterval();\n    };\n\n    const handleInputChange = (target) => {\n        target.value = target.value.replace(/[^0-9\\.]/g, '');\n        const valueMap = {\n            'y-coor': (newVal) => (yCoor = newVal),\n            'x-coor': (newVal) => (xCoor = newVal),\n            angle: (newVal) => (angle = newVal),\n            'fire-velocity': (newVal) => (fireVelocity = newVal),\n            mass: (newVal) => (mass = newVal),\n            radius: (newVal) => (projectileRadius = newVal),\n            fluid: (newVal) => (airDensity = newVal),\n            dragCoeff: (newVal) => (dragCoeff = newVal),\n        };\n        const id = target.id;\n        valueMap[id](\n            target.value && !isNaN(target.value)\n                ? parseFloat(target.value)\n                : null,\n        );\n    };\n\n    const toggleDragInput = () => {\n        applyDrag = !applyDrag;\n        if (applyDrag) {\n            document.getElementById('drag-inputs').style.display = 'flex';\n        } else {\n            document.getElementById('drag-inputs').style.display = 'none';\n        }\n    };\n\n    return (\n        <div className='draw-container' id='draw-container' tabIndex='0'>\n            <section className='input-parent'>\n                <div className='input-container'>\n                    {inputMap.map((obj, index) => {\n                        return (\n                            <InputField\n                                key={index}\n                                id={obj.id}\n                                placeholder={obj.placeholder}\n                                defaultValue={obj.defaultValue}\n                                label={obj.label}\n                                handleChange={handleInputChange}\n                            />\n                        );\n                    })}\n                    <div className='input-field-container' id='drag-container'>\n                        <label className='grid-label' htmlFor='drag'>\n                            Apply Drag\n                        </label>\n                        <input\n                            id='drag'\n                            type='checkbox'\n                            onChange={toggleDragInput}\n                        ></input>\n                    </div>\n                </div>\n                <div\n                    className='input-container drag'\n                    id='drag-inputs'\n                    style={{ display: 'none' }}\n                >\n                    {inputDragMap.map((obj, index) => {\n                        return (\n                            <InputField\n                                key={index}\n                                id={obj.id}\n                                placeholder={obj.placeholder}\n                                defaultValue={obj.defaultValue}\n                                label={obj.label}\n                                handleChange={handleInputChange}\n                            />\n                        );\n                    })}\n                </div>\n            </section>\n            <div className='move-container' id='projectile-move-container'>\n                <canvas\n                    className='canvas'\n                    id='my-canvas-projectile'\n                    height={gridSizeY * dpr}\n                    width={gridSizeX * dpr}\n                    onClick={handleCanvasClick}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default ProjectileMotion;\n","import ProjectileMotion from './components/projectileMotion/projectileMotion';\n\nfunction App() {\n    return (\n        <div className='App'>\n            <ProjectileMotion />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}